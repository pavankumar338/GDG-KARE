-- Migration: Create ml_registrations and legacy "ml-registrations" tables
-- This migration creates a recommended table `ml_registrations` (underscored)
-- and a legacy quoted table "ml-registrations" to preserve compatibility with
-- existing frontend code. Both tables have the same columns and RLS policies.

-- Recommended table (use this name in code: ml_registrations)
CREATE TABLE IF NOT EXISTS public.ml_registrations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  problem_statement TEXT,

  -- participant 1
  p1_name TEXT,
  p1_ack TEXT,
  p1_regno TEXT,
  p1_whatsapp TEXT,
  p1_year INTEGER,
  p1_department TEXT,
  p1_email TEXT,

  -- participant 2
  p2_name TEXT,
  p2_ack TEXT,
  p2_regno TEXT,
  p2_whatsapp TEXT,
  p2_year INTEGER,
  p2_department TEXT,
  p2_email TEXT

);

-- Ensure columns exist (idempotent) in case the table was created previously without all columns
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS problem_statement TEXT;
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS p1_name TEXT;
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS p1_ack TEXT;
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS p1_regno TEXT;
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS p1_whatsapp TEXT;
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS p1_year INTEGER;
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS p1_department TEXT;
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS p1_email TEXT;
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS p2_name TEXT;
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS p2_ack TEXT;
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS p2_regno TEXT;
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS p2_whatsapp TEXT;
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS p2_year INTEGER;
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS p2_department TEXT;
ALTER TABLE public.ml_registrations ADD COLUMN IF NOT EXISTS p2_email TEXT;

CREATE INDEX IF NOT EXISTS idx_ml_registrations_p1_regno ON public.ml_registrations (p1_regno);
CREATE INDEX IF NOT EXISTS idx_ml_registrations_p2_regno ON public.ml_registrations (p2_regno);
-- Removed status column/index per request. If you previously had a `status` column,
-- drop it idempotently below. No status index will be created here.

-- Enable RLS and create permissive policies for the anon (client) key.
ALTER TABLE public.ml_registrations ENABLE ROW LEVEL SECURITY;

-- Allow anonymous inserts from the client (used by frontend anon key).
CREATE POLICY "Allow public insert" ON public.ml_registrations
  FOR INSERT
  WITH CHECK (true);

-- Allow anonymous select so client can read inserted row after insert (adjust if private)
CREATE POLICY "Allow public select" ON public.ml_registrations
  FOR SELECT
  USING (true);

-- Legacy quoted table to match existing code which references "ml-registrations"
-- (kept to avoid immediate code changes). Create identical structure.
CREATE TABLE IF NOT EXISTS "ml-registrations" (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  problem_statement TEXT,

  p1_name TEXT,
  p1_ack TEXT,
  p1_regno TEXT,
  p1_whatsapp TEXT,
  p1_year INTEGER,
  p1_department TEXT,
  p1_email TEXT,

  p2_name TEXT,
  p2_ack TEXT,
  p2_regno TEXT,
  p2_whatsapp TEXT,
  p2_year INTEGER,
  p2_department TEXT,
  p2_email TEXT,

  transaction_id TEXT,
  screenshot_url JSONB,

  status TEXT
);

-- Ensure columns exist (idempotent) for legacy table
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS problem_statement TEXT;
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS p1_name TEXT;
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS p1_ack TEXT;
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS p1_regno TEXT;
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS p1_whatsapp TEXT;
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS p1_year INTEGER;
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS p1_department TEXT;
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS p1_email TEXT;
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS p2_name TEXT;
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS p2_ack TEXT;
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS p2_regno TEXT;
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS p2_whatsapp TEXT;
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS p2_year INTEGER;
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS p2_department TEXT;
ALTER TABLE "ml-registrations" ADD COLUMN IF NOT EXISTS p2_email TEXT;

-- transaction_id, screenshot_url and status removed intentionally. If they exist
-- from a previous migration run, drop them idempotently below.

CREATE INDEX IF NOT EXISTS idx_ml_registrations_p1_regno_legacy ON "ml-registrations" (p1_regno);
CREATE INDEX IF NOT EXISTS idx_ml_registrations_p2_regno_legacy ON "ml-registrations" (p2_regno);
-- Removed legacy status index (status column removed).

-- Drop deprecated columns idempotently on both tables in case they exist from
-- earlier runs or older schema versions. This is safe to run multiple times.
ALTER TABLE public.ml_registrations DROP COLUMN IF EXISTS status;
ALTER TABLE public.ml_registrations DROP COLUMN IF EXISTS transaction_id;
ALTER TABLE public.ml_registrations DROP COLUMN IF EXISTS screenshot_url;

-- Remove convenience/legacy columns that are no longer part of the canonical
-- schema. These are dropped idempotently so running this migration is safe.
ALTER TABLE public.ml_registrations DROP COLUMN IF EXISTS team_name;
ALTER TABLE public.ml_registrations DROP COLUMN IF EXISTS name;
ALTER TABLE public.ml_registrations DROP COLUMN IF EXISTS registration_number;
ALTER TABLE public.ml_registrations DROP COLUMN IF EXISTS whatsapp_number;
ALTER TABLE public.ml_registrations DROP COLUMN IF EXISTS year;
ALTER TABLE public.ml_registrations DROP COLUMN IF EXISTS department;
ALTER TABLE public.ml_registrations DROP COLUMN IF EXISTS college_email;
ALTER TABLE public.ml_registrations DROP COLUMN IF EXISTS registration_date;

ALTER TABLE "ml-registrations" DROP COLUMN IF EXISTS status;
ALTER TABLE "ml-registrations" DROP COLUMN IF EXISTS transaction_id;
ALTER TABLE "ml-registrations" DROP COLUMN IF EXISTS screenshot_url;

-- Remove convenience/legacy columns from the legacy quoted table as well.
ALTER TABLE "ml-registrations" DROP COLUMN IF EXISTS team_name;
ALTER TABLE "ml-registrations" DROP COLUMN IF EXISTS name;
ALTER TABLE "ml-registrations" DROP COLUMN IF EXISTS registration_number;
ALTER TABLE "ml-registrations" DROP COLUMN IF EXISTS whatsapp_number;
ALTER TABLE "ml-registrations" DROP COLUMN IF EXISTS year;
ALTER TABLE "ml-registrations" DROP COLUMN IF EXISTS department;
ALTER TABLE "ml-registrations" DROP COLUMN IF EXISTS college_email;
ALTER TABLE "ml-registrations" DROP COLUMN IF EXISTS registration_date;

ALTER TABLE "ml-registrations" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow public insert" ON "ml-registrations"
  FOR INSERT
  WITH CHECK (true);

CREATE POLICY "Allow public select" ON "ml-registrations"
  FOR SELECT
  USING (true);

-- Optional: create a view that unifies both tables for read convenience.
-- This allows tooling to query `public.ml_registrations_all` and see combined data.
CREATE OR REPLACE VIEW public.ml_registrations_all AS
  -- Select an explicit, shared column set that contains only the canonical
  -- participant and problem columns (no convenience/legacy columns). This
  -- keeps the view stable even after dropping legacy columns from the tables.
  SELECT
    id,
    problem_statement,
    p1_name,
    p1_ack,
    p1_regno,
    p1_whatsapp,
    p1_year,
    p1_department,
    p1_email,
    p2_name,
    p2_ack,
    p2_regno,
    p2_whatsapp,
    p2_year,
    p2_department,
    p2_email,
    'underscored' AS source_table
  FROM public.ml_registrations
  UNION ALL
  SELECT
    id,
    problem_statement,
    p1_name,
    p1_ack,
    p1_regno,
    p1_whatsapp,
    p1_year,
    p1_department,
    p1_email,
    p2_name,
    p2_ack,
    p2_regno,
    p2_whatsapp,
    p2_year,
    p2_department,
    p2_email,
    'legacy' AS source_table
  FROM "ml-registrations";

-- End of migration
